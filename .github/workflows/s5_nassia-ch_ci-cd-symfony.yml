name: Symfony CI
on:
  push:
    branches:
      - main
    paths:
      - "ressources/s5/nassia-ch/projets/ci-cd-symfony/**"
defaults:
  run:
    working-directory: ressources/s5/nassia-ch/projets/ci-cd-symfony
jobs:
  ci-symfony:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          coverage: pcov
          
      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --no-scripts
        
      - name: Run PHP-CS-Fixer
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff
        
      - name: Run PHP lint
        run: find src tests -name "*.php" -exec php -l {} \;
        
      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse
        
      - name: Run PHPUnit
        run: ./vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
        
      - name: Audit de sécurité
        run: composer audit --format=json --no-interaction
        continue-on-error: true

      - name: Install production dependencies
        run: composer install --no-dev --optimize-autoloader --no-scripts
        
      - name: Dump environment variables for production
        run: composer dump-env prod
        env:
          APP_ENV: prod
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Install frontend dependencies
        run: php bin/console importmap:install
        continue-on-error: true
        
      - name: Compile assets
        run: php bin/console asset-map:compile
        continue-on-error: true
        
      - name: Create artifact archive
        run: tar -czf symfony-artifact-r1.tar.gz --exclude=.git --exclude=tests --exclude=var/cache --exclude=symfony-artifact-r1.tar.gz .
        continue-on-error: true
              
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: symfony-artifact
          path: symfony-artifact-r1.tar.gz
          
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: symfony-artifact

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push PHP image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile-php
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/symfony-php:latest
            ghcr.io/${{ github.repository_owner }}/symfony-php:${{ github.sha }}

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/nginx/dockerfile-nginx
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/symfony-nginx:latest
            ghcr.io/${{ github.repository_owner }}/symfony-nginx:${{ github.sha }}
          
      - name: Deploy to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "symfony-artifact-r1.tar.gz"
          target: "/tmp/"
          
- name: Deploy with Docker on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /var/www/my-app
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            wget -O docker-compose.prod.yml https://raw.githubusercontent.com/${{ github.repository }}/main/ressources/s5/nassia-ch/projets/ci-cd-symfony/docker-compose.prod.yml
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker-compose -f docker-compose.prod.yml exec -T php php bin/console doctrine:migrations:migrate --no-interaction
            docker-compose -f docker-compose.prod.yml exec -T php php bin/console cache:clear --env=prod
